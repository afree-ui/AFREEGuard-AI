from flask import Flask, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
load_dotenv()
from algosdk.v2client import indexer
from algosdk.v2client import algod
import base64, json, os

app = Flask(__name__)
CORS(app)  # ‚úÖ Enable Cross-Origin access for Streamlit frontend
@app.route('/')
def home():
    return {
        "status": "AFREEGuard AI backend running",
        "message": "Ready to receive security logs üöÄ"
    }
@app.route('/api/events', methods=['GET'])
def get_events():
    """
    Returns the latest AFREEGuard AI blockchain security logs.
    Reads from the events.jsonl file generated by logger.py
    """
    events_file = "logs/events.jsonl"
    events = []

    if not os.path.exists(events_file):
        return jsonify({"events": [], "message": "No events yet"})

    with open(events_file, "r") as f:
        for line in f:
            try:
                events.append(json.loads(line))
            except Exception:
                continue

    return jsonify({"events": events})

ALGOD_URL = os.getenv("ALGO_NODE_URL", "https://testnet-api.algonode.cloud")
ALGOD_KEY = os.getenv("ALGO_API_KEY", "")
ALGOD_CLIENT = algod.AlgodClient(ALGOD_KEY, ALGOD_URL)

# ‚úÖ Add the Indexer client for transaction history
INDEXER_URL = "https://testnet-idx.algonode.cloud"
INDEXER_CLIENT = indexer.IndexerClient(ALGOD_KEY, INDEXER_URL)

def fetch_afreeguard_logs(wallet_addr):
    txs = INDEXER_CLIENT.search_transactions_by_address(wallet_addr, limit=10)["transactions"]
    logs = []
    for tx in txs:
        try:
            if "note" in tx and tx["note"]:
                note = json.loads(base64.b64decode(tx["note"]).decode())
                logs.append({
                    "ts": note.get("ts", "unknown"),
                    "action": note.get("action", "N/A"),
                    "blocked": note.get("blocked", False),
                    "reason": note.get("reason", ""),
                    "txid": tx["id"]
                })
        except Exception:
            continue
    return logs

@app.route("/api/logs")
def get_logs():
    wallet = os.getenv("AFREECHAIN_WALLET")

    # ‚úÖ Step 1: Check if wallet is set
    if not wallet:
        print("‚ö†Ô∏è  Missing AFREECHAIN_WALLET environment variable")
        return jsonify({"error": "Missing AFREECHAIN_WALLET"}), 400

    try:
        # ‚úÖ Step 2: Fetch logs from the blockchain
        logs = fetch_afreeguard_logs(wallet)
        print(f"‚úÖ Retrieved {len(logs)} blockchain logs for wallet {wallet}")
        return jsonify({"events": logs})

    except Exception as e:
        # ‚úÖ Step 3: Print detailed error for debugging
        print("‚ùå Error fetching logs:", str(e))
        return jsonify({"error": str(e)}), 500

@app.route("/api/reset", methods=["POST"])
def clear_logs():
    """Clears the local event log file (used by the dashboard Reset button)."""
    events_file = "logs/events.jsonl"

    try:
        os.makedirs("logs", exist_ok=True)
        with open(events_file, "w", encoding="utf-8") as f:
            pass  # empty file
        print("üßπ Logs cleared via dashboard command")
        return jsonify({"message": "Logs cleared"}), 200
    except Exception as e:
        print("‚ùå Error clearing logs:", str(e))
        return jsonify({"error": str(e)}), 500        

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8502)